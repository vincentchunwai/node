import os from 'os';
import { Adapter } from '@node-escpos/adapter';
import { findByIds, usb, getDeviceList, findBySerialNumber } from 'usb';

const IFACE_CLASS = {
  AUDIO: 1,
  HID: 3,
  PRINTER: 7,
  HUB: 9
};
class USBAdapter extends Adapter {
  constructor(vid, pid) {
    super();
    this.device = null;
    this.endpoint = null;
    this.deviceToPcEndpoint = null;
    this.detachDevice = this.detachDevice.bind(this);
    if (vid && pid && typeof vid === "number") {
      this.device = findByIds(vid, pid) || null;
    } else if (vid && vid instanceof usb.Device) {
      this.device = vid;
    } else {
      const devices = USBAdapter.findPrinter();
      if (devices && devices.length)
        this.device = devices[0];
    }
    if (!this.device)
      throw new Error("Can not find printer");
    usb.on("detach", this.detachDevice);
  }
  detachDevice(device) {
    if (device === this.device) {
      this.emit("detach", device);
      this.emit("disconnect", device);
      this.device = null;
    }
  }
  static on(event, listener) {
    usb.on(event, listener);
  }
  static isPrinter(device) {
    try {
      const length = device.configDescriptor?.interfaces.filter((iface) => {
        return iface.filter((conf) => {
          return conf.bInterfaceClass === IFACE_CLASS.PRINTER;
        }).length;
      }).length;
      return length !== void 0 && length > 0;
    } catch (e) {
      return false;
    }
  }
  static findPrinter() {
    return getDeviceList().filter((device) => USBAdapter.isPrinter(device));
  }
  static getDevice(vid, pid) {
    return new Promise((resolve, reject) => {
      try {
        const device = findByIds(vid, pid);
        device?.open();
        resolve(device);
      } catch (err) {
        reject(err);
      }
    });
  }
  static getDeviceBySerial(serialNumber) {
    return new Promise(async (resolve, reject) => {
      try {
        const device = await findBySerialNumber(serialNumber);
        device?.open();
        resolve(device);
      } catch (err) {
        reject(err);
      }
    });
  }
  open(callback) {
    const _this = this;
    let counter = 0;
    this.device?.open();
    (this.device?.interfaces || []).forEach((iface) => {
      (function(iface2) {
        iface2.setAltSetting(iface2.altSetting, () => {
          try {
            if (os.platform() !== "win32") {
              if (iface2.isKernelDriverActive()) {
                try {
                  iface2.detachKernelDriver();
                } catch (e) {
                  console.error("[ERROR] Could not detatch kernel driver: %s", e);
                }
              }
            }
            iface2.claim();
            iface2.endpoints.forEach((endpoint) => {
              if (endpoint.direction === "out" && !_this.endpoint)
                _this.endpoint = endpoint;
              if (endpoint.direction === "in" && !_this.deviceToPcEndpoint)
                _this.deviceToPcEndpoint = endpoint;
            });
            if (_this.endpoint) {
              _this.emit("connect", _this.device);
              callback && callback(null);
            } else if (++counter === _this.device?.interfaces?.length && !_this.endpoint) {
              callback && callback(new Error("Can not find endpoint from printer"));
            }
          } catch (err) {
            callback && callback(err);
          }
        });
      })(iface);
    });
    return this;
  }
  read(callback) {
    this.deviceToPcEndpoint?.transfer?.(64, (err, data) => {
      if (err)
        console.error(err);
      else if (data)
        callback?.(data);
    });
  }
  write(data, callback) {
    this.emit("data", data);
    this.endpoint?.transfer?.(data, callback);
    return this;
  }
  close(callback) {
    if (!this.device)
      callback?.(new Error("Device not found"));
    try {
      this.device?.close();
      usb.removeListener("detach", this.detachDevice);
      callback && callback(null);
      this.emit("close", this.device);
    } catch (err) {
      callback && callback(err);
    }
    return this;
  }
}

export { USBAdapter as default };
